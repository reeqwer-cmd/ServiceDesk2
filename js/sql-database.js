// js/sql-database.js
class SQLDatabase {
    constructor() {
        this.db = null;
        this.storageKey = 'service_desk_sql_db';
        this.init();
    }

    async init() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º SQL.js
            const SQL = await initSqlJs({
                locateFile: file => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.8.0/${file}`
            });

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –∏–∑ localStorage –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            const savedDb = localStorage.getItem(this.storageKey);
            
            if (savedDb) {
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –æ–±—Ä–∞—Ç–Ω–æ –≤ Uint8Array
                const data = this.base64ToUint8Array(savedDb);
                this.db = new SQL.Database(data);
                console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ localStorage');
            } else {
                this.db = new SQL.Database();
                console.log('‚úÖ –ù–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞');
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã
            this.initializeTables();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
            this.useFallback = true;
        }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –≤ localStorage
    saveDatabase() {
        if (this.db) {
            try {
                const data = this.db.export();
                const base64 = this.uint8ArrayToBase64(data);
                localStorage.setItem(this.storageKey, base64);
                console.log('üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã:', error);
            }
        }
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Uint8Array –≤ base64
    uint8ArrayToBase64(uint8Array) {
        let binary = '';
        const len = uint8Array.byteLength;
        for (let i = 0; i < len; i++) {
            binary += String.fromCharCode(uint8Array[i]);
        }
        return btoa(binary);
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –≤ Uint8Array
    base64ToUint8Array(base64) {
        const binary = atob(base64);
        const len = binary.length;
        const bytes = new Uint8Array(len);
        for (let i = 0; i < len; i++) {
            bytes[i] = binary.charCodeAt(i);
        }
        return bytes;
    }

    initializeTables() {
        // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        this.db.run(`
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                password TEXT NOT NULL,
                name TEXT NOT NULL,
                email TEXT UNIQUE NOT NULL,
                department TEXT NOT NULL,
                role TEXT NOT NULL DEFAULT 'user',
                created DATETIME DEFAULT CURRENT_TIMESTAMP,
                last_login DATETIME,
                is_active BOOLEAN DEFAULT 1,
                permissions TEXT,
                created_by TEXT
            )
        `);

        // –¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫
        this.db.run(`
            CREATE TABLE IF NOT EXISTS tickets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT NOT NULL,
                description TEXT NOT NULL,
                priority TEXT NOT NULL,
                category TEXT NOT NULL,
                status TEXT DEFAULT 'open',
                created_by TEXT NOT NULL,
                assigned_to TEXT,
                created DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        const adminCheck = this.db.exec("SELECT * FROM users WHERE username = 'admin'");
        if (adminCheck[0]?.values.length === 0) {
            this.createAdminUser();
        } else {
            // –û–ë–ù–û–í–õ–Ø–ï–ú —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ admin —á—Ç–æ–±—ã –ø—Ä–∞–≤–∞ –±—ã–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏
            this.fixAdminPermissions();
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        this.runMigrations();

        this.saveDatabase(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã');
    }

    // –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    fixAdminPermissions() {
        const adminPermissions = JSON.stringify(this.getAdminPermissions());
        
        this.db.run(
            "UPDATE users SET role = 'admin', permissions = ? WHERE username = 'admin'",
            [adminPermissions]
        );
        console.log('üîß –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã');
    }

    // –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π
    runMigrations() {
        console.log('üîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        
        const migrations = [
            // –ú–∏–≥—Ä–∞—Ü–∏—è 1: –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            `UPDATE users SET permissions = '${JSON.stringify(this.getAdminPermissions())}' 
             WHERE role = 'admin' AND permissions NOT LIKE '%create_users%'`,
            
            // –ú–∏–≥—Ä–∞—Ü–∏—è 2: —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ admin –∏–º–µ–µ—Ç —Ä–æ–ª—å admin
            `UPDATE users SET role = 'admin' WHERE username = 'admin' AND role != 'admin'`,
            
            // –ú–∏–≥—Ä–∞—Ü–∏—è 3: –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            `UPDATE users SET permissions = '${JSON.stringify(this.getPermissionsByRole('admin'))}' 
             WHERE username = 'admin'`
        ];
        
        migrations.forEach((migration, index) => {
            try {
                this.db.exec(migration);
                console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${index + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`);
            } catch (error) {
                console.warn(`‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è ${index + 1} –ø—Ä–æ–ø—É—â–µ–Ω–∞:`, error.message);
            }
        });
    }

    createAdminUser() {
        const adminUser = {
            username: 'admin',
            password: 'Fghtkm123',
            name: '–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            email: 'admin@company.com',
            department: 'IT',
            role: 'admin',
            permissions: JSON.stringify(this.getAdminPermissions()),
            created_by: 'system'
        };

        this.db.run(`
            INSERT INTO users (username, password, name, email, department, role, permissions, created_by)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        `, [
            adminUser.username,
            adminUser.password,
            adminUser.name,
            adminUser.email,
            adminUser.department,
            adminUser.role,
            adminUser.permissions,
            adminUser.created_by
        ]);

        this.saveDatabase(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞
        console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω –≤ SQL –±–∞–∑–µ');
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    async createUser(userData) {
        try {
            // –ó–ê–©–ò–¢–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if (userData.username !== 'admin') {
                const adminCheck = this.db.exec("SELECT id FROM users WHERE username = 'admin'");
                if (adminCheck[0]?.values.length > 0) {
                    const adminId = adminCheck[0].values[0][0];
                    console.log('üîí Admin ID –∑–∞—â–∏—â–µ–Ω:', adminId);
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞
            const usernameCheck = this.db.exec(
                "SELECT id FROM users WHERE username = ?", 
                [userData.username]
            );
            
            if (usernameCheck[0]?.values.length > 0) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email
            const emailCheck = this.db.exec(
                "SELECT id FROM users WHERE email = ?", 
                [userData.email]
            );
            
            if (emailCheck[0]?.values.length > 0) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            }

            const permissions = this.getPermissionsByRole(userData.role);

            this.db.run(`
                INSERT INTO users (username, password, name, email, department, role, permissions, created_by)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            `, [
                userData.username,
                userData.password,
                userData.name,
                userData.email,
                userData.department,
                userData.role,
                JSON.stringify(permissions),
                userData.createdBy || 'system'
            ]);

            this.saveDatabase(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ SQL –±–∞–∑–µ:', userData.username);
            return this.getUserByUsername(userData.username);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }

    async getUserByUsername(username) {
        try {
            const result = this.db.exec(
                "SELECT * FROM users WHERE username = ?", 
                [username]
            );
            
            if (result[0]?.values.length > 0) {
                const user = this.mapUserFromDB(result[0].values[0], result[0].columns);
                return user;
            }
            return null;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return null;
        }
    }

    async getAllUsers() {
        try {
            const result = this.db.exec("SELECT * FROM users ORDER BY created DESC");
            if (result[0]?.values.length > 0) {
                return result[0].values.map(row => 
                    this.mapUserFromDB(row, result[0].columns)
                );
            }
            return [];
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            return [];
        }
    }

    async updateUser(userId, updates) {
        try {
            // –ó–ê–©–ò–¢–ê: –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –∏–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            const user = await this.getUserById(userId);
            if (user && user.username === 'admin') {
                if (updates.role && updates.role !== 'admin') {
                    throw new Error('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
                }
                if (updates.permissions) {
                    console.warn('‚ö†Ô∏è –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞—â–∏—â–µ–Ω—ã –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π');
                    delete updates.permissions; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞
                }
                if (updates.username && updates.username !== 'admin') {
                    throw new Error('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
                }
            }

            const setClause = [];
            const values = [];

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –¥–ª—è SQL
            const fieldMap = {
                isActive: 'is_active',
                lastLogin: 'last_login',
                createdBy: 'created_by'
            };

            Object.keys(updates).forEach(key => {
                const dbField = fieldMap[key] || key;
                
                if (dbField === 'permissions' && typeof updates[key] === 'object') {
                    setClause.push(`${dbField} = ?`);
                    values.push(JSON.stringify(updates[key]));
                } else {
                    setClause.push(`${dbField} = ?`);
                    values.push(updates[key]);
                }
            });

            values.push(userId);

            this.db.run(
                `UPDATE users SET ${setClause.join(', ')} WHERE id = ?`,
                values
            );

            this.saveDatabase(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω, ID:', userId);
            return this.getUserById(userId);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }

    async getUserById(userId) {
        try {
            const result = this.db.exec(
                "SELECT * FROM users WHERE id = ?", 
                [userId]
            );
            
            if (result[0]?.values.length > 0) {
                return this.mapUserFromDB(result[0].values[0], result[0].columns);
            }
            return null;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return null;
        }
    }

    async deleteUser(userId) {
        try {
            // –ó–ê–©–ò–¢–ê: –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            const user = await this.getUserById(userId);
            if (user && user.username === 'admin') {
                throw new Error('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã');
            }

            this.db.run("DELETE FROM users WHERE id = ?", [userId]);
            this.saveDatabase(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω, ID:', userId);
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }

    mapUserFromDB(row, columns) {
        const user = {};
        columns.forEach((col, index) => {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –æ–±—Ä–∞—Ç–Ω–æ
            const fieldMap = {
                'is_active': 'isActive',
                'last_login': 'lastLogin', 
                'created_by': 'createdBy'
            };
            const fieldName = fieldMap[col] || col;
            user[fieldName] = row[index];
        });

        // –ü–∞—Ä—Å–∏–º permissions –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏
        if (user.permissions) {
            try {
                user.permissions = JSON.parse(user.permissions);
            } catch {
                user.permissions = [];
            }
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è
        if (user.isActive !== undefined) {
            user.isActive = Boolean(user.isActive);
        }

        return user;
    }

    getPermissionsByRole(role) {
        const permissions = {
            'admin': this.getAdminPermissions(),
            'manager': [
                'manage_tickets', 'view_reports', 'assign_tickets',
                'edit_tickets', 'close_tickets'
            ],
            'user': [
                'create_tickets', 'view_own_tickets', 'edit_own_tickets'
            ]
        };
        
        // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∞, –¥–∞–∂–µ –µ—Å–ª–∏ —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        return permissions[role] || permissions['user'];
    }

    // –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    getAdminPermissions() {
        return [
            'create_users', 'edit_users', 'delete_users', 
            'manage_tickets', 'view_reports', 'system_settings',
            'export_data', 'manage_categories'
        ];
    }

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    getDatabaseInfo() {
        try {
            const userCount = this.db.exec("SELECT COUNT(*) as count FROM users")[0]?.values[0][0] || 0;
            const adminCheck = this.db.exec("SELECT role, permissions FROM users WHERE username = 'admin'");
            let adminInfo = '–ù–µ –Ω–∞–π–¥–µ–Ω';
            
            if (adminCheck[0]?.values.length > 0) {
                const admin = adminCheck[0].values[0];
                adminInfo = `–†–æ–ª—å: ${admin[0]}, –ü—Ä–∞–≤: ${JSON.parse(admin[1]).length}`;
            }
            
            return {
                totalUsers: userCount,
                adminUser: adminInfo,
                storageSize: localStorage.getItem(this.storageKey)?.length || 0,
                storageKey: this.storageKey
            };
        } catch (error) {
            return { error: error.message };
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
window.sqlDB = new SQLDatabase();

// –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
console.log(`
üéÆ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã
sqlDB.getDatabaseInfo()

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
sqlDB.getAllUsers().then(users => console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', users))

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
sqlDB.getUserByUsername('admin').then(admin => console.log('–ê–¥–º–∏–Ω:', admin))

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å localStorage
Object.keys(localStorage).forEach(key => console.log(key + ':', localStorage[key].length + ' chars'))
`);