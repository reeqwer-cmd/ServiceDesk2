// js/database.js
class UserDatabase {
    constructor() {
        this.dbName = 'service_desk_db';
        this.userStore = 'users';
        this.init();
    }

    init() {
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage –∫–∞–∫ "–±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã IndexedDB –∏–ª–∏ API –∫ —Å–µ—Ä–≤–µ—Ä—É
        if (!localStorage.getItem(this.dbName)) {
            this.initializeDatabase();
        }
    }

    initializeDatabase() {
        const defaultUsers = [
            { 
                id: 1, 
                username: 'admin', 
                password: 'Fghtkm123', 
                name: '–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 
                role: 'admin',
                email: 'admin@company.com',
                department: 'IT',
                created: new Date().toISOString(),
                lastLogin: null,
                isActive: true,
                permissions: ['create_users', 'edit_users', 'delete_users', 'manage_tickets', 'view_reports', 'system_settings']
            }
        ];
        
        this.saveAllUsers(defaultUsers);
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    saveAllUsers(users) {
        const db = this.getDatabase();
        db.users = users;
        localStorage.setItem(this.dbName, JSON.stringify(db));
    }

    // –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    getDatabase() {
        return JSON.parse(localStorage.getItem(this.dbName) || '{"users":[]}');
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    getAllUsers() {
        const db = this.getDatabase();
        return db.users || [];
    }

    // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    getUserById(id) {
        const users = this.getAllUsers();
        return users.find(user => user.id === id);
    }

    // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É
    getUserByUsername(username) {
        const users = this.getAllUsers();
        return users.find(user => user.username.toLowerCase() === username.toLowerCase());
    }

    // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    createUser(userData) {
        const users = this.getAllUsers();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞
        if (this.getUserByUsername(userData.username)) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email
        if (users.find(user => user.email.toLowerCase() === userData.email.toLowerCase())) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }

        const newUser = {
            id: Date.now(), // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
            username: userData.username,
            password: userData.password,
            name: userData.name,
            email: userData.email,
            department: userData.department,
            role: userData.role || 'user',
            created: new Date().toISOString(),
            lastLogin: null,
            isActive: true,
            permissions: this.getPermissionsByRole(userData.role),
            createdBy: JSON.parse(localStorage.getItem('currentUser'))?.username || 'system'
        };

        users.push(newUser);
        this.saveAllUsers(users);
        
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ –±–∞–∑–µ:', newUser);
        return newUser;
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updateUser(userId, updates) {
        const users = this.getAllUsers();
        const userIndex = users.findIndex(user => user.id === userId);
        
        if (userIndex === -1) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–æ–ª–∏
        if (updates.role) {
            updates.permissions = this.getPermissionsByRole(updates.role);
        }

        users[userIndex] = { ...users[userIndex], ...updates };
        this.saveAllUsers(users);
        
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', users[userIndex]);
        return users[userIndex];
    }

    // –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    deleteUser(userId) {
        const users = this.getAllUsers();
        const updatedUsers = users.filter(user => user.id !== userId);
        this.saveAllUsers(updatedUsers);
        
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω, ID:', userId);
        return true;
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    updateLastLogin(username) {
        const users = this.getAllUsers();
        const userIndex = users.findIndex(user => user.username === username);
        
        if (userIndex !== -1) {
            users[userIndex].lastLogin = new Date().toISOString();
            this.saveAllUsers(users);
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Ä–æ–ª–∏
    getPermissionsByRole(role) {
        const permissions = {
            'admin': [
                'create_users', 'edit_users', 'delete_users', 
                'manage_tickets', 'view_reports', 'system_settings',
                'export_data', 'manage_categories'
            ],
            'manager': [
                'manage_tickets', 'view_reports', 'assign_tickets',
                'edit_tickets', 'close_tickets'
            ],
            'user': [
                'create_tickets', 'view_own_tickets', 'edit_own_tickets'
            ]
        };
        
        return permissions[role] || permissions['user'];
    }

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    searchUsers(query, roleFilter = '') {
        let users = this.getAllUsers();
        
        if (query) {
            const searchTerm = query.toLowerCase();
            users = users.filter(user => 
                user.name.toLowerCase().includes(searchTerm) ||
                user.username.toLowerCase().includes(searchTerm) ||
                user.email.toLowerCase().includes(searchTerm) ||
                user.department.toLowerCase().includes(searchTerm)
            );
        }
        
        if (roleFilter) {
            users = users.filter(user => user.role === roleFilter);
        }
        
        return users;
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    getUserStats() {
        const users = this.getAllUsers();
        return {
            total: users.length,
            active: users.filter(u => u.isActive).length,
            admins: users.filter(u => u.role === 'admin').length,
            managers: users.filter(u => u.role === 'manager').length,
            regularUsers: users.filter(u => u.role === 'user').length
        };
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∞)
    exportUsers() {
        const users = this.getAllUsers();
        const dataStr = JSON.stringify(users, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        
        return URL.createObjectURL(dataBlob);
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
window.userDB = new UserDatabase();

// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log(`
üéÆ –ö–û–ú–ê–ù–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•:

userDB.getAllUsers() - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
userDB.getUserStats() - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
userDB.searchUsers("–ø–æ–∏—Å–∫") - –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
userDB.exportUsers() - —ç–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`, window.userDB.getUserStats());