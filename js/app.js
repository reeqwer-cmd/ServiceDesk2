// js/app.js
class App {
    constructor() {
        this.currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
        this.currentTab = 'tickets';
        this.init();
    }

    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        this.initializeEventListeners();
        this.checkAdminPermissions();
        this.updateUserInfo();
        this.loadInitialData();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
        this.switchTab('tickets');
    }

    initializeEventListeners() {
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
        
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º
        document.querySelectorAll('.nav-item[data-tab]').forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                const tabName = e.target.getAttribute('data-tab');
                console.log('üìÅ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É:', tabName);
                this.switchTab(tabName);
            });
        });

        // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        document.getElementById('refreshBtn')?.addEventListener('click', () => {
            this.refreshCurrentTab();
        });

        // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        document.getElementById('createTicketForm')?.addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleCreateTicket(new FormData(e.target));
        });

        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        document.getElementById('ticketDepartment')?.addEventListener('change', async (e) => {
            await this.loadCategoriesForDepartment(e.target.value);
        });

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        document.getElementById('createDepartmentBtn')?.addEventListener('click', () => {
            this.showCreateDepartmentModal();
        });

        document.getElementById('createCategoryBtn')?.addEventListener('click', () => {
            this.showCreateCategoryModal();
        });

        // –í–∫–ª–∞–¥–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        document.querySelectorAll('.tab-button[data-subtab]').forEach(button => {
            button.addEventListener('click', (e) => {
                this.switchSubTab(e.target.getAttribute('data-subtab'));
            });
        });

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        document.getElementById('createUserBtn')?.addEventListener('click', () => {
            this.showCreateUserModal();
        });

        // –§–∏–ª—å—Ç—Ä—ã –∑–∞—è–≤–æ–∫
        document.getElementById('statusFilter')?.addEventListener('change', () => {
            this.loadTickets();
        });

        document.getElementById('searchTickets')?.addEventListener('input', () => {
            this.loadTickets();
        });

        // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        document.getElementById('searchUsers')?.addEventListener('input', () => {
            this.loadUsersManagement();
        });

        document.getElementById('roleFilter')?.addEventListener('change', () => {
            this.loadUsersManagement();
        });

        console.log('‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    switchTab(tabName) {
        console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É:', tabName);
        
        // –°–∫—Ä—ã—Ç—å –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
        document.querySelectorAll('.tab-content').forEach(tab => {
            tab.classList.remove('active');
        });
        
        // –£–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
        document.querySelectorAll('.nav-item').forEach(item => {
            item.classList.remove('active');
        });
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        const targetTab = document.getElementById(tabName);
        if (targetTab) {
            targetTab.classList.add('active');
            console.log('‚úÖ –í–∫–ª–∞–¥–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∞:', tabName);
        } else {
            console.error('‚ùå –í–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', tabName);
        }
        
        // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é
        const targetNavItem = document.querySelector(`[data-tab="${tabName}"]`);
        if (targetNavItem) {
            targetNavItem.classList.add('active');
        }
        
        // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const titleElement = document.getElementById('contentTitle');
        if (titleElement) {
            titleElement.textContent = this.getTabTitle(tabName);
        }
        
        // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        this.currentTab = tabName;
        this.loadTabData(tabName);
    }

    getTabTitle(tabName) {
        const titles = {
            'tickets': '–ó–∞—è–≤–∫–∏',
            'create-ticket': '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É',
            'users': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
            'departments-management': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º–∏',
            'user-management': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
            'reports': '–û—Ç—á–µ—Ç—ã'
        };
        return titles[tabName] || '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è';
    }

    async loadTabData(tabName) {
        console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∫–ª–∞–¥–∫–∏:', tabName);
        
        switch(tabName) {
            case 'tickets':
                await this.loadTickets();
                break;
            case 'create-ticket':
                await this.loadDepartmentsForForms();
                break;
            case 'users':
                await this.loadUsers();
                break;
            case 'departments-management':
                await this.loadDepartmentsAndCategories();
                break;
            case 'user-management':
                await this.loadUsersManagement();
                break;
            case 'reports':
                await this.loadReports();
                break;
        }
    }

    async loadInitialData() {
        console.log('üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        await this.createSampleData();
        await this.loadDepartmentsForForms();
    }

    async createSampleData() {
        const departments = window.dataManager.getDepartments();
        if (departments.length === 0) {
            console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
            
            // –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            const itDept = window.dataManager.createDepartment({
                name: 'IT –æ—Ç–¥–µ–ª',
                description: '–û—Ç–¥–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π'
            });
            
            const hrDept = window.dataManager.createDepartment({
                name: 'HR –æ—Ç–¥–µ–ª',
                description: '–û—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤'
            });
            
            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è IT
            window.dataManager.createCategory({
                name: '–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º',
                description: '–ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ –∏ –Ω–æ—É—Ç–±—É–∫–æ–≤',
                department_id: itDept.id
            });
            
            window.dataManager.createCategory({
                name: '–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é',
                description: '–ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç—å—é',
                department_id: itDept.id
            });
            
            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è HR
            window.dataManager.createCategory({
                name: '–û—Ç–ø—É—Å–∫–∞',
                description: '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–ø—É—Å–∫–æ–≤',
                department_id: hrDept.id
            });
            
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã');
        }
    }

    updateUserInfo() {
        const userInfo = document.getElementById('userInfo');
        if (userInfo && this.currentUser.name) {
            userInfo.textContent = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${this.currentUser.name} (${this.currentUser.role})`;
        }
    }

    checkAdminPermissions() {
        const isAdmin = window.auth?.isAdmin?.() || this.currentUser.role === 'admin';
        console.log('üëë –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', isAdmin);
        
        const adminElements = document.querySelectorAll('.admin-only');
        
        adminElements.forEach(element => {
            element.style.display = isAdmin ? 'block' : 'none';
        });
    }

    // ===== –ó–ê–Ø–í–ö–ò =====
    async loadTickets() {
        const container = document.getElementById('ticketsList');
        if (!container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        container.innerHTML = '<div class="empty-state">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫...</div>';

        try {
            let tickets;
            if (window.auth?.isAdmin?.()) {
                tickets = await window.ticketManager.getAllTickets();
            } else {
                tickets = await window.ticketManager.getUserTickets();
            }

            console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞—è–≤–æ–∫:', tickets.length);

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            const statusFilter = document.getElementById('statusFilter')?.value || '';
            const searchFilter = document.getElementById('searchTickets')?.value.toLowerCase() || '';

            if (statusFilter) {
                tickets = tickets.filter(ticket => ticket.status === statusFilter);
            }

            if (searchFilter) {
                tickets = tickets.filter(ticket => 
                    ticket.title.toLowerCase().includes(searchFilter) ||
                    (ticket.description && ticket.description.toLowerCase().includes(searchFilter))
                );
            }

            this.renderTicketsList(tickets, container);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫:', error);
            container.innerHTML = '<div class="empty-state">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫</div>';
        }
    }

    renderTicketsList(tickets, container) {
        if (!tickets || tickets.length === 0) {
            container.innerHTML = '<div class="empty-state">–ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }

        container.innerHTML = tickets.map(ticket => {
            // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const departments = window.dataManager.getDepartments();
            const categories = window.dataManager.getCategories();
            
            const department = departments.find(d => d.id === ticket.department_id);
            const category = categories.find(c => c.id === ticket.category_id);

            return `
                <div class="ticket-item">
                    <div class="ticket-header">
                        <h3 class="ticket-title">${ticket.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h3>
                        <div class="ticket-meta">
                            <span class="ticket-badge ${window.ticketManager?.getStatusClass?.(ticket.status) || 'status-open'}">
                                ${window.ticketManager?.getStatusText?.(ticket.status) || ticket.status}
                            </span>
                            <span class="ticket-badge ${window.ticketManager?.getPriorityClass?.(ticket.priority) || 'priority-medium'}">
                                ${window.ticketManager?.getPriorityText?.(ticket.priority) || ticket.priority}
                            </span>
                        </div>
                    </div>
                    <div class="ticket-description">
                        ${ticket.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
                    </div>
                    <div class="ticket-footer">
                        <div class="ticket-info">
                            <span>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: ${department?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
                            <span>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</span>
                            <span>–°–æ–∑–¥–∞–Ω–∞: ${this.formatDate(ticket.created_date)}</span>
                        </div>
                        <div class="ticket-actions">
                            ${window.auth?.isAdmin?.() ? `
                                <button class="btn-secondary" onclick="app.editTicket(${ticket.id})">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                            ` : ''}
                        </div>
                    </div>
                </div>
            `;
        }).join('');
    }

    async handleCreateTicket(formData) {
        try {
            const ticketData = {
                title: formData.get('title'),
                description: formData.get('description'),
                departmentId: parseInt(formData.get('departmentId')),
                categoryId: parseInt(formData.get('categoryId')),
                priority: formData.get('priority')
            };

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if (!ticketData.title || !ticketData.departmentId || !ticketData.categoryId) {
                throw new Error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            }

            await window.ticketManager.createTicket(ticketData);
            
            alert('‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
            document.getElementById('createTicketForm').reset();
            this.switchTab('tickets');
            
        } catch (error) {
            alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: ' + error.message);
        }
    }

    // ===== –ü–û–î–†–ê–ó–î–ï–õ–ï–ù–ò–Ø –ò –ö–ê–¢–ï–ì–û–†–ò–ò =====
    async loadDepartmentsForForms() {
        const departmentSelect = document.getElementById('ticketDepartment');
        if (!departmentSelect) return;

        try {
            const departments = await window.departmentsManager?.getAllDepartments?.() || [];
            departmentSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ</option>' +
                departments.map(dept => 
                    `<option value="${dept.id}">${dept.name}</option>`
                ).join('');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π:', error);
        }
    }

    async loadCategoriesForDepartment(departmentId) {
        const categorySelect = document.getElementById('ticketCategory');
        if (!categorySelect) return;

        if (!departmentId) {
            categorySelect.innerHTML = '<option value="">–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ</option>';
            return;
        }

        try {
            const categories = await window.departmentsManager?.getCategoriesByDepartment?.(departmentId) || [];
            categorySelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>' +
                categories.map(cat => 
                    `<option value="${cat.id}">${cat.name}</option>`
                ).join('');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
            categorySelect.innerHTML = '<option value="">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</option>';
        }
    }

    async loadDepartmentsAndCategories() {
        await this.loadDepartmentsList();
        await this.loadCategoriesList();
    }

    async loadDepartmentsList() {
        try {
            const departments = await window.departmentsManager?.getAllDepartments?.() || [];
            this.renderDepartmentsList(departments);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π:', error);
        }
    }

    renderDepartmentsList(departments) {
        const container = document.getElementById('departmentsList');
        if (!container) return;

        if (!departments || departments.length === 0) {
            container.innerHTML = '<div class="empty-state">–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π</div>';
            return;
        }

        container.innerHTML = departments.map(dept => `
            <div class="department-item">
                <div class="department-info">
                    <h4>${dept.name}</h4>
                    <p>${dept.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
                    <div class="department-meta">
                        <span>–°–æ–∑–¥–∞–Ω–æ: ${this.formatDate(dept.created_date)}</span>
                        <span>–ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${dept.categories_count || 0}</span>
                    </div>
                </div>
                <div class="department-actions">
                    <button class="btn-secondary" onclick="app.editDepartment(${dept.id})">‚úèÔ∏è</button>
                    <button class="btn-danger" onclick="app.deleteDepartment(${dept.id})">üóëÔ∏è</button>
                </div>
            </div>
        `).join('');
    }

    async loadCategoriesList() {
        try {
            const categories = await window.departmentsManager?.getAllCategories?.() || [];
            this.renderCategoriesList(categories);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
        }
    }

    renderCategoriesList(categories) {
        const container = document.getElementById('categoriesList');
        if (!container) return;

        if (!categories || categories.length === 0) {
            container.innerHTML = '<div class="empty-state">–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π</div>';
            return;
        }

        container.innerHTML = categories.map(cat => `
            <div class="category-item">
                <div class="category-info">
                    <h4>${cat.name}</h4>
                    <p>${cat.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
                    <div class="category-meta">
                        <span>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: ${cat.department_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
                        <span>–°–æ–∑–¥–∞–Ω–æ: ${this.formatDate(cat.created_date)}</span>
                    </div>
                </div>
                <div class="category-actions">
                    <button class="btn-secondary" onclick="app.editCategory(${cat.id})">‚úèÔ∏è</button>
                    <button class="btn-danger" onclick="app.deleteCategory(${cat.id})">üóëÔ∏è</button>
                </div>
            </div>
        `).join('');
    }

    showCreateDepartmentModal() {
        this.showModal(
            '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è',
            `
            <form id="createDepartmentForm">
                <div class="form-group">
                    <label for="departmentName">–ù–∞–∑–≤–∞–Ω–∏–µ:</label>
                    <input type="text" id="departmentName" name="name" required>
                </div>
                <div class="form-group">
                    <label for="departmentDescription">–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                    <textarea id="departmentDescription" name="description" rows="3"></textarea>
                </div>
            </form>
            `,
            async () => {
                const form = document.getElementById('createDepartmentForm');
                const formData = new FormData(form);
                
                const departmentData = {
                    name: formData.get('name'),
                    description: formData.get('description')
                };

                if (!departmentData.name) {
                    throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
                }

                await window.departmentsManager.createDepartment(departmentData);
                await this.loadDepartmentsAndCategories();
                await this.loadDepartmentsForForms(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ö
            }
        );
    }

    showCreateCategoryModal() {
        this.loadDepartmentOptions().then(optionsHTML => {
            this.showModal(
                '–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                `
                <form id="createCategoryForm">
                    <div class="form-group">
                        <label for="categoryName">–ù–∞–∑–≤–∞–Ω–∏–µ:</label>
                        <input type="text" id="categoryName" name="name" required>
                    </div>
                    <div class="form-group">
                        <label for="categoryDescription">–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                        <textarea id="categoryDescription" name="description" rows="3"></textarea>
                    </div>
                    <div class="form-group">
                        <label for="categoryDepartment">–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</label>
                        <select id="categoryDepartment" name="departmentId" required>
                            ${optionsHTML}
                        </select>
                    </div>
                </form>
                `,
                async () => {
                    const form = document.getElementById('createCategoryForm');
                    const formData = new FormData(form);
                    
                    const categoryData = {
                        name: formData.get('name'),
                        description: formData.get('description'),
                        departmentId: parseInt(formData.get('departmentId'))
                    };

                    if (!categoryData.name || !categoryData.departmentId) {
                        throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
                    }

                    await window.departmentsManager.createCategory(categoryData);
                    await this.loadDepartmentsAndCategories();
                }
            );
        });
    }

    async loadDepartmentOptions() {
        try {
            const departments = await window.departmentsManager?.getAllDepartments?.() || [];
            return '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ</option>' +
                departments.map(dept => 
                    `<option value="${dept.id}">${dept.name}</option>`
                ).join('');
        } catch (error) {
            return '<option value="">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π</option>';
        }
    }

    // ===== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò =====
    async loadUsers() {
        const container = document.getElementById('usersList');
        if (!container) return;

        try {
            const users = await window.auth?.getAllUsers?.() || [];
            this.renderUsersList(users, container);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            container.innerHTML = '<div class="empty-state">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>';
        }
    }

    async loadUsersManagement() {
        const container = document.getElementById('usersManagementList');
        if (!container) return;

        try {
            let users = await window.auth?.getAllUsers?.() || [];
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            const searchFilter = document.getElementById('searchUsers')?.value.toLowerCase() || '';
            const roleFilter = document.getElementById('roleFilter')?.value || '';

            if (searchFilter) {
                users = users.filter(user => 
                    user.name.toLowerCase().includes(searchFilter) ||
                    user.username.toLowerCase().includes(searchFilter) ||
                    (user.email && user.email.toLowerCase().includes(searchFilter))
                );
            }

            if (roleFilter) {
                users = users.filter(user => user.role === roleFilter);
            }

            this.renderUsersManagementList(users);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            container.innerHTML = '<div class="empty-state">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>';
        }
    }

    renderUsersList(users, container) {
        if (!users || users.length === 0) {
            container.innerHTML = '<div class="empty-state">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }

        container.innerHTML = users.map(user => `
            <div class="user-item">
                <div class="user-info">
                    <h4>${user.name}</h4>
                    <p>–õ–æ–≥–∏–Ω: ${user.username} | –†–æ–ª—å: ${user.role} | –û—Ç–¥–µ–ª: ${user.department || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                </div>
            </div>
        `).join('');
    }

    renderUsersManagementList(users) {
        const container = document.getElementById('usersManagementList');
        if (!container) return;

        if (!users || users.length === 0) {
            container.innerHTML = '<div class="empty-state">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }

        container.innerHTML = users.map(user => `
            <div class="user-item">
                <div class="user-info">
                    <h4>${user.name}</h4>
                    <p>–õ–æ–≥–∏–Ω: ${user.username} | –†–æ–ª—å: ${user.role} | Email: ${user.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                    <small>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${this.formatDate(user.created_date)}</small>
                </div>
                <div class="user-actions">
                    <button class="btn-secondary" onclick="app.editUser(${user.id})">‚úèÔ∏è</button>
                    <button class="btn-danger" onclick="app.deleteUser(${user.id})">üóëÔ∏è</button>
                </div>
            </div>
        `).join('');
    }

    showCreateUserModal() {
        this.showModal(
            '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            `
            <form id="createUserForm">
                <div class="form-group">
                    <label for="userName">–§–ò–û:</label>
                    <input type="text" id="userName" name="name" required>
                </div>
                <div class="form-group">
                    <label for="userUsername">–õ–æ–≥–∏–Ω:</label>
                    <input type="text" id="userUsername" name="username" required>
                </div>
                <div class="form-group">
                    <label for="userEmail">Email:</label>
                    <input type="email" id="userEmail" name="email">
                </div>
                <div class="form-group">
                    <label for="userPassword">–ü–∞—Ä–æ–ª—å:</label>
                    <input type="password" id="userPassword" name="password" required>
                </div>
                <div class="form-group">
                    <label for="userRole">–†–æ–ª—å:</label>
                    <select id="userRole" name="role" required>
                        <option value="user">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</option>
                        <option value="manager">–ú–µ–Ω–µ–¥–∂–µ—Ä</option>
                        <option value="admin">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="userDepartment">–û—Ç–¥–µ–ª:</label>
                    <input type="text" id="userDepartment" name="department">
                </div>
            </form>
            `,
            async () => {
                const form = document.getElementById('createUserForm');
                const formData = new FormData(form);
                
                const userData = {
                    name: formData.get('name'),
                    username: formData.get('username'),
                    email: formData.get('email'),
                    password: formData.get('password'),
                    role: formData.get('role'),
                    department: formData.get('department')
                };

                if (!userData.name || !userData.username || !userData.password) {
                    throw new Error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
                }

                await window.auth.createUser(userData);
                await this.loadUsersManagement();
            }
        );
    }

    // ===== –û–¢–ß–ï–¢–´ =====
    async loadReports() {
        try {
            const stats = await window.ticketManager?.getStats?.() || {
                total: 0,
                open: 0,
                inProgress: 0,
                resolved: 0
            };
            this.renderReports(stats);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–æ–≤:', error);
        }
    }

    renderReports(stats) {
        document.getElementById('totalTickets').textContent = stats.total || 0;
        document.getElementById('openTickets').textContent = stats.open || 0;
        document.getElementById('inProgressTickets').textContent = stats.inProgress || 0;
        document.getElementById('resolvedTickets').textContent = stats.resolved || 0;
    }

    // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====
    switchSubTab(subTab) {
        document.querySelectorAll('.subtab-content').forEach(tab => {
            tab.classList.remove('active');
        });
        
        const targetSubTab = document.getElementById(`${subTab}-subtab`);
        if (targetSubTab) {
            targetSubTab.classList.add('active');
        }
        
        document.querySelectorAll('.tab-button[data-subtab]').forEach(button => {
            button.classList.remove('active');
        });
        
        const targetButton = document.querySelector(`[data-subtab="${subTab}"]`);
        if (targetButton) {
            targetButton.classList.add('active');
        }
    }

    showModal(title, content, onConfirm) {
        const modalOverlay = document.getElementById('modalOverlay');
        const modalTitle = document.getElementById('modalTitle');
        const modalContent = document.getElementById('modalContent');
        
        if (!modalOverlay || !modalTitle || !modalContent) {
            console.error('‚ùå –ú–æ–¥–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        modalTitle.textContent = title;
        modalContent.innerHTML = content;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        modalContent.innerHTML += `
            <div class="modal-actions">
                <button type="button" class="btn-secondary" id="modalCancel">–û—Ç–º–µ–Ω–∞</button>
                <button type="button" class="btn-primary" id="modalConfirm">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            </div>
        `;
        
        modalOverlay.style.display = 'flex';
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        const cancelBtn = document.getElementById('modalCancel');
        const confirmBtn = document.getElementById('modalConfirm');
        
        if (cancelBtn) {
            cancelBtn.onclick = () => {
                modalOverlay.style.display = 'none';
            };
        }
        
        if (confirmBtn) {
            confirmBtn.onclick = async () => {
                try {
                    await onConfirm();
                    modalOverlay.style.display = 'none';
                } catch (error) {
                    alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
                }
            };
        }
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –æ–≤–µ—Ä–ª–µ–π
        modalOverlay.onclick = (e) => {
            if (e.target === modalOverlay) {
                modalOverlay.style.display = 'none';
            }
        };
    }

    refreshCurrentTab() {
        this.loadTabData(this.currentTab);
    }

    formatDate(dateString) {
        if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
        
        try {
            const date = new Date(dateString);
            return date.toLocaleDateString('ru-RU') + ' ' + date.toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'});
        } catch (error) {
            return dateString;
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∏)
    editTicket(ticketId) {
        alert('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ ' + ticketId);
    }

    editDepartment(departmentId) {
        alert('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è ' + departmentId);
    }

    editCategory(categoryId) {
        alert('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ' + categoryId);
    }

    editUser(userId) {
        alert('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' + userId);
    }

    async deleteDepartment(departmentId) {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ? –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.')) {
            try {
                await window.departmentsManager.deleteDepartment(departmentId);
                await this.loadDepartmentsAndCategories();
                await this.loadDepartmentsForForms(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç—ã
            } catch (error) {
                alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
            }
        }
    }

    async deleteCategory(categoryId) {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é?')) {
            try {
                await window.departmentsManager.deleteCategory(categoryId);
                await this.loadDepartmentsAndCategories();
            } catch (error) {
                alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
            }
        }
    }

    async deleteUser(userId) {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')) {
            try {
                await window.auth.deleteUser(userId);
                await this.loadUsersManagement();
            } catch (error) {
                alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
            }
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    window.app = new App();
});

console.log('üöÄ Service Desk App –∑–∞–≥—Ä—É–∂–µ–Ω');